generator client {
  provider = "prisma-client-js"
  output   = "../models"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model affiliate {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  id_account   String?       @db.Uuid
  id_user      String?       @db.Uuid
  auth_account auth_account? @relation(fields: [id_account], references: [id], map: "affiliate_id_user_fkey")
  auth_user    auth_user[]
}

model auth_account {
  id                       String      @id(map: "m_user_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password                 String?
  id_provider              String?     @db.VarChar
  access_token             String?
  refresh_token            String?
  id_token                 String?
  access_token_expires_at  DateTime?
  refresh_token_expires_at DateTime?
  scope                    String?
  created_at               DateTime    @default(now())
  updated_at               DateTime?
  id_user                  String?     @db.Uuid
  id_account               String?     @db.VarChar
  affiliate                affiliate[]
  auth_user                auth_user?  @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "user_fk_id_user_info")
  author                   author[]
  customer                 customer[]
  internal                 internal[]
  publisher                publisher[]
}

model auth_session {
  id         String    @id(map: "session_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires_at DateTime
  token      String    @unique(map: "session_token_key")
  created_at DateTime  @default(now())
  updated_at DateTime?
  ip_address String?
  user_agent String?
  id_user    String    @db.Uuid
  auth_user  auth_user @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "session_user_info_id_fkey")
}

model auth_two_factor {
  id           String    @id(map: "two_factor_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  secret       String?
  backup_codes String?
  id_user      String    @db.Uuid
  auth_user    auth_user @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "two_factor_user_info_id_fkey")
}

model auth_user {
  id                 String            @id(map: "user_info_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String            @db.VarChar
  email              String            @unique(map: "user_info_email_key") @db.VarChar
  email_verified     Boolean           @default(false)
  image              String?
  created_at         DateTime          @default(now())
  updated_at         DateTime?
  username           String?
  display_username   String?
  two_factor_enabled Boolean?
  id_customer        String?           @db.Uuid
  id_author          String?           @db.Uuid
  id_affiliate       String?           @db.Uuid
  id_publisher       String?           @db.Uuid
  id_internal        String?           @db.Uuid
  auth_account       auth_account[]
  auth_session       auth_session[]
  auth_two_factor    auth_two_factor[]
  affiliate          affiliate?        @relation(fields: [id_affiliate], references: [id], onDelete: Cascade, map: "user_id_affiliate_fkey")
  author             author?           @relation(fields: [id_author], references: [id], onDelete: Cascade, map: "user_id_author_fkey")
  customer           customer?         @relation(fields: [id_customer], references: [id], onDelete: Cascade, map: "user_id_customer_fkey")
  internal           internal?         @relation(fields: [id_internal], references: [id], onDelete: Cascade, map: "user_id_internal_fkey")
  publisher          publisher?        @relation(fields: [id_publisher], references: [id], onDelete: Cascade, map: "user_id_publisher_fkey")
  notif              notif[]
  reviews            reviews[]
  reviews_likes      reviews_likes[]
}

model auth_verification {
  id         String    @id(map: "verification_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  value      String
  expires_at DateTime
  created_at DateTime  @default(now())
  updated_at DateTime?
}

model author {
  id               String             @id(map: "author_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  id_account       String?            @db.Uuid
  biography        String?
  social_media     String?            @db.VarChar
  avatar           String?            @db.VarChar
  id_user          String?            @db.Uuid
  cfg              Json?
  auth_user        auth_user[]
  auth_account     auth_account?      @relation(fields: [id_account], references: [id], map: "author_id_user_fkey")
  book             book[]
  product          product[]
  publisher_author publisher_author[]
}

model banner {
  id          String    @id(map: "banner_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  banner_file String    @default("[]")
  status      String?   @default("ON") @db.VarChar
  deleted_at  DateTime?
  link        String?
}

model book {
  id               String             @id(map: "book_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String
  alias            String             @default("")
  submitted_price  Decimal            @db.Decimal(18, 2)
  desc             String             @default("")
  info             Json?              @default("{}")
  status           String             @default("draft") @db.VarChar(10)
  currency         String             @default("Rp.") @db.VarChar(3)
  deleted_at       DateTime?
  img_file         String             @default("")
  cover            String             @default("")
  product_file     String             @default("[]")
  sku              String             @default("")
  id_author        String?            @db.Uuid
  published_date   DateTime           @default(now())
  is_physical      Boolean            @default(false)
  preorder_min_qty Int?
  content_type     String?            @db.VarChar(20)
  is_chapter       Boolean            @default(false)
  id_product       String?            @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  cfg              Json?
  author           author?            @relation(fields: [id_author], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_fk_id_author")
  product          product?           @relation(fields: [id_product], references: [id], map: "book_fk_id_product")
  book_approval    book_approval[]
  book_changes_log book_changes_log[]
  book_genre       book_genre[]
  book_tags        book_tags[]
  chapter          chapter[]
  ranking          ranking[]
  reviews          reviews[]
}

model book_approval {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_book     String    @db.Uuid
  id_internal String?   @db.Uuid
  comment     String?
  status      String    @default("submitted") @db.VarChar(20)
  created_at  DateTime  @default(now())
  book        book      @relation(fields: [id_book], references: [id], map: "book_approval_fk_id_book")
  internal    internal? @relation(fields: [id_internal], references: [id], onDelete: Restrict, map: "book_approval_fk_id_internal")
}

model book_changes_log {
  id_book    String   @db.Uuid
  created_at DateTime @default(now())
  changes    Json?
  book       book     @relation(fields: [id_book], references: [id], onDelete: Cascade, map: "book_changes_log_fk_id_book")

  @@id([id_book, created_at], map: "book_changes_log_pk")
}

model book_genre {
  id       String @id(map: "book_genre_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_genre String @db.Uuid
  id_book  String @db.Uuid
  book     book   @relation(fields: [id_book], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genre    genre  @relation(fields: [id_genre], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model book_tags {
  id      String @id(map: "book_tags_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_tags String @db.Uuid
  id_book String @db.Uuid
  book    book   @relation(fields: [id_book], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags    tags   @relation(fields: [id_tags], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model bundle {
  id              String            @id(map: "bundle_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  slug            String
  strike_price    Decimal?          @db.Decimal(18, 2)
  real_price      Decimal           @db.Decimal(18, 2)
  currency        String            @default("Rp.") @db.VarChar(3)
  desc            String            @default("")
  info            Json              @default("{}")
  deleted_at      DateTime?
  status          String            @default("draft") @db.VarChar(10)
  img_file        String            @default("[]")
  cover           String            @default("")
  sku             String            @default("")
  cfg             Json?
  bundle_category bundle_category[]
  bundle_product  bundle_product[]
  t_sales_line    t_sales_line[]
}

model bundle_category {
  id          String   @id(map: "bundle_category_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_category String   @db.Uuid
  id_bundle   String   @db.Uuid
  bundle      bundle   @relation(fields: [id_bundle], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category    category @relation(fields: [id_category], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model bundle_product {
  id_bundle  String  @db.Uuid
  id_product String  @db.Uuid
  id         String  @id(map: "bundle_product_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qty        Int?    @default(1) @db.SmallInt
  bundle     bundle  @relation(fields: [id_bundle], references: [id], onDelete: Cascade)
  product    product @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model category {
  id               String             @id(map: "category_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  id_parent        String?            @db.Uuid
  deleted_at       DateTime?
  slug             String?
  img              String?
  bundle_category  bundle_category[]
  category         category?          @relation("categoryTocategory", fields: [id_parent], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_category   category[]         @relation("categoryTocategory")
  product_category product_category[]
}

model cfg {
  key   String @id @db.VarChar
  value String @db.VarChar
}

model chapter {
  id         String    @id(map: "chapter_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_product String?   @db.Uuid
  id_book    String?   @db.Uuid
  number     Int
  name       String
  content    Json      @default("{\"blocks\": []}")
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  book       book?     @relation(fields: [id_book], references: [id], onDelete: Restrict, map: "chapter_fk_id_book")
  product    product?  @relation(fields: [id_product], references: [id], onDelete: Restrict, map: "chapter_fk_id_product")
}

model customer {
  id               String             @id(map: "customer_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  whatsapp         String
  deleted_at       DateTime?
  otp              Int?               @db.SmallInt
  id_account       String?            @db.Uuid
  name             String
  email            String
  id_user          String?            @db.Uuid
  auth_user        auth_user[]
  auth_account     auth_account?      @relation(fields: [id_account], references: [id], map: "customer_id_user_fkey")
  customer_reader  customer_reader[]
  customer_track   customer_track[]
  t_sales          t_sales[]
  t_sales_download t_sales_download[]
}

model customer_reader {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_customer String   @db.Uuid
  id_product  String   @db.Uuid
  last_page   Int
  percent     Int      @db.SmallInt
  customer    customer @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_reader_fk_id_customer")
  product     product  @relation(fields: [id_product], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_reader_fk_id_product")
}

model customer_track {
  id          String   @id(map: "customer_track_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ts          DateTime @default(now())
  id_customer String   @db.Uuid
  path        String
  referrer    String
  info        Json
  ip          String   @db.VarChar(40)
  customer    customer @relation(fields: [id_customer], references: [id], onDelete: Cascade, map: "customer_track_fk_id_customer")

  @@index([id_customer], map: "fki_customer_track_fk_id_customer")
}

model genre {
  id          String       @id(map: "genre_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  id_parent   String?      @db.Uuid
  slug        String?
  img         String?
  deleted_at  DateTime?
  book_genre  book_genre[]
  genre       genre?       @relation("genreTogenre", fields: [id_parent], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_genre genre[]      @relation("genreTogenre")
}

model internal {
  id                     String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_account             String?         @db.Uuid
  name                   String
  is_sales_and_marketing Boolean         @default(false)
  is_support             Boolean         @default(false)
  is_management          Boolean         @default(false)
  is_it                  Boolean         @default(false)
  id_user                String?         @db.Uuid
  auth_user              auth_user[]
  book_approval          book_approval[]
  auth_account           auth_account?   @relation(fields: [id_account], references: [id], map: "internal_fk_id_account")
}

model landing {
  id            String          @id(map: "landing_page_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug          String
  views         Int
  deleted_at    DateTime?
  status        String          @default("published")
  title         String          @default("")
  landing_items landing_items[]
}

model landing_items {
  id         String  @id(map: "landing_items_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  desc       String  @default("")
  img_file   String
  tag        String  @default("h1")
  link_to    String
  landing_id String  @db.Uuid
  idx        Int     @default(1) @db.SmallInt
  color      String  @default("#ffffff")
  landing    landing @relation(fields: [landing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model midtrx {
  id      String   @id(map: "midtrx_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tz      DateTime @default(now()) @db.Timestamptz(6)
  type    String
  payload Json
}

model notif {
  id_user    String    @db.Uuid
  created_at DateTime  @default(now())
  message    String    @db.VarChar
  type       String    @db.VarChar
  status     String    @db.VarChar
  url        String?   @db.VarChar
  data       Json?
  thumbnail  String?   @db.VarChar
  auth_user  auth_user @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "notif_fk_id_user")

  @@id([id_user, created_at], map: "notif_pk")
}

model preorder {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_product  String   @db.Uuid
  min_qty     Int
  current_qty Int      @default(0)
  status      String   @default("open") @db.VarChar(10)
  deadline    DateTime
  product     product  @relation(fields: [id_product], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product {
  id               String             @id(map: "product_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String
  alias            String             @default("")
  strike_price     Decimal?           @db.Decimal(18, 2)
  real_price       Decimal            @db.Decimal(18, 2)
  desc             String             @default("")
  info             Json?              @default("{}")
  status           String             @default("draft") @db.VarChar(10)
  currency         String             @default("Rp.") @db.VarChar(3)
  deleted_at       DateTime?
  img_file         String             @default("")
  cover            String             @default("")
  product_file     String             @default("[]")
  sku              String             @default("")
  id_author        String?            @db.Uuid
  published_date   DateTime           @default(now())
  is_physical      Boolean            @default(false)
  preorder_min_qty Int?
  content_type     String?            @db.VarChar(20)
  is_chapter       Boolean            @default(false)
  book             book[]
  bundle_product   bundle_product[]
  chapter          chapter[]
  customer_reader  customer_reader[]
  preorder         preorder[]
  author           author?            @relation(fields: [id_author], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_category product_category[]
  t_sales_download t_sales_download[]
  t_sales_line     t_sales_line[]
}

model product_category {
  id_product  String   @db.Uuid
  id_category String   @db.Uuid
  id          String   @id(map: "product_category_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category    category @relation(fields: [id_category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     product  @relation(fields: [id_product], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model promo_code {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String    @unique
  discount_type  String    @db.VarChar(10)
  discount_value Decimal   @db.Decimal(18, 2)
  valid_from     DateTime
  valid_to       DateTime
  usage_limit    Int
  used_count     Int       @default(0)
  status         String    @default("active") @db.VarChar(10)
  id_publisher   String    @db.Uuid
  publisher      publisher @relation(fields: [id_publisher], references: [id])
}

model publisher {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_account       String?            @db.Uuid
  name             String
  description      String?
  website          String?            @db.VarChar
  address          String?
  logo             String?
  id_user          String?            @db.Uuid
  auth_user        auth_user[]
  promo_code       promo_code[]
  auth_account     auth_account?      @relation(fields: [id_account], references: [id], map: "publisher_id_user_fkey")
  publisher_author publisher_author[]
  t_ai_credit      t_ai_credit[]
  transaction      transaction[]
  withdrawal       withdrawal[]
}

model publisher_author {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publisher_id String    @db.Uuid
  author_id    String    @db.Uuid
  author       author    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  publisher    publisher @relation(fields: [publisher_id], references: [id], onDelete: Cascade)

  @@unique([publisher_id, author_id])
}

model ranking {
  id      String @id(map: "ranking_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_book String @db.Uuid
  book    book   @relation(fields: [id_book], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reviews {
  id            String          @id(map: "reviews_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_book       String          @db.Uuid
  comments      String
  rating        Decimal?        @db.Decimal
  created_at    DateTime
  deleted_at    DateTime?
  parent        String?         @db.Uuid
  id_user       String          @db.Uuid
  book          book            @relation(fields: [id_book], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user     auth_user       @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews_likes reviews_likes[]
}

model reviews_likes {
  id         String    @id(map: "reviews_likes_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_reviews String    @db.Uuid
  id_user    String    @db.Uuid
  reviews    reviews   @relation(fields: [id_reviews], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auth_user  auth_user @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model t_ai_credit {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_publisher      String              @db.Uuid
  balance           Int                 @default(0)
  last_topup_at     DateTime?
  publisher         publisher           @relation(fields: [id_publisher], references: [id])
  t_ai_credit_topup t_ai_credit_topup[]
}

model t_ai_credit_topup {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_t_ai_credit String      @db.Uuid
  amount         Int
  created_at     DateTime    @default(now())
  status         String      @default("pending") @db.VarChar(10)
  t_ai_credit    t_ai_credit @relation(fields: [id_t_ai_credit], references: [id])
}

model t_sales {
  id                String         @id(map: "sales_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_customer       String         @db.Uuid
  status            String         @default("cart") @db.VarChar(10)
  total             Decimal        @db.Decimal(18, 2)
  currency          String         @default("Rp.") @db.VarChar(3)
  info              Json
  created_at        DateTime       @default(now())
  updated_at        DateTime?
  deleted_at        DateTime?
  midtrans_order_id String         @default("")
  midtrans_success  Json?
  midtrans_pending  Json?
  midtrans_error    Json?
  customer          customer       @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  t_sales_line      t_sales_line[]
}

model t_sales_download {
  id            String    @id(map: "t_sales_product_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_product    String    @db.Uuid
  id_customer   String    @db.Uuid
  downloaded_at DateTime?
  ip_address    String?
  download_key  String    @default("")
  customer      customer  @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product       product   @relation(fields: [id_product], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model t_sales_line {
  id          String   @id(map: "sales_line_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_sales    String   @db.Uuid
  unit_price  Decimal  @db.Decimal(18, 2)
  qty         Int
  total_price Decimal  @db.Decimal(18, 2)
  id_product  String?  @db.Uuid
  id_bundle   String?  @db.Uuid
  bundle      bundle?  @relation(fields: [id_bundle], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     product? @relation(fields: [id_product], references: [id], onDelete: Cascade)
  t_sales     t_sales  @relation(fields: [id_sales], references: [id], onDelete: Cascade)
}

model tags {
  id         String      @id(map: "tags_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  id_parent  String?     @db.Uuid
  deleted_at DateTime?
  slug       String?
  img        String?
  book_tags  book_tags[]
  tags       tags?       @relation("tagsTotags", fields: [id_parent], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_tags tags[]      @relation("tagsTotags")
}

model transaction {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_publisher String    @db.Uuid
  type         String    @db.VarChar(20)
  amount       Decimal   @db.Decimal(18, 2)
  created_at   DateTime  @default(now())
  info         Json      @default("{}")
  publisher    publisher @relation(fields: [id_publisher], references: [id])
}

model withdrawal {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_publisher String    @db.Uuid
  amount       Decimal   @db.Decimal(18, 2)
  status       String    @default("pending") @db.VarChar(10)
  requested_at DateTime  @default(now())
  processed_at DateTime?
  publisher    publisher @relation(fields: [id_publisher], references: [id])
}
